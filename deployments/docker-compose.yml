version: '3.8'

services:

  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: iotdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - iot_network

  mqtt_broker:
    image: eclipse-mosquitto
    container_name: mqtt_broker
    restart: always
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - iot_network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - iot_network

  worker:
    build:
      context: ../backend
      dockerfile: Iot2Project.Worker/Dockerfile
    depends_on:
      - mqtt_broker
      - kafka
    environment:
      - Kafka__BootstrapServers=kafka:9092
      - Kafka__DefaultTopic=iot2-tanks-test
    networks:
      - iot_network
  
  api:
    build:
      context: ../backend
      dockerfile: Iot2Project.API/Dockerfile
    ports:
      - "5000:8080"                   # 5000 na sua máquina → 80 no container
    environment:
      - ASPNETCORE_ENVIRONMENT=Production     # (já vem por default)
      - ConnectionStrings__Default=Host=db;Port=5432;Database=iotdb;Username=user;Password=password
      - DATABASE_URL=postgresql://user:password@db:5432/iotdb
    depends_on:
      - db
    networks:
      - iot_network

       # --------------------------------------------------
  # FRONTEND – React SPA servido por Nginx
  # --------------------------------------------------
  frontend-dev:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: angular_frontend_dev
    # monta o seu código pra live-reload e isola node_modules
    volumes:
      - ../frontend:/app
      - /app/node_modules
    ports:
      - "4200:4200"
    environment:
      # contagem de watch no Alpine precisa de polling
      - CHOKIDAR_USEPOLLING=true
    networks:
      - iot_network
  
volumes:
  postgres_data:

networks:
  iot_network:
    driver: bridge
